generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                                  String              @id @default(cuid())
  email                               String              @unique
  firstName                           String
  lastName                            String
  phone                               String?
  avatar                              String?
  password                            String
  userType                            UserType            @default(INDIVIDUAL)
  verified                            Boolean             @default(false)
  emailVerified                       Boolean             @default(false)
  phoneVerified                       Boolean             @default(false)
  emailVerifyToken                    String?
  phoneVerifyToken                    String?
  verifyTokenExpiry                   DateTime?
  twoFactorEnabled                    Boolean             @default(false)
  twoFactorSecret                     String?
  loginNotifications                  Boolean             @default(true)
  securityAlerts                      Boolean             @default(true)
  sessionTimeout                      Int                 @default(30)
  lastPasswordChange                  DateTime?
  passwordHistory                     Json?
  active                              Boolean             @default(true)
  
  // نظام العضوية والتوثيق المحسن
  membershipLevel                     MembershipLevel     @default(BASIC)
  experienceLevel                     ExperienceLevel     @default(BEGINNER)
  trustScore                          Int                 @default(0)
  premiumUntil                        DateTime?
  completedTransactions               Int                 @default(0)
  averageRating                       Float               @default(0.0)
  reviewCount                         Int                 @default(0)
  identityDocumentVerified            Boolean             @default(false)
  addressProofVerified                Boolean             @default(false)
  
  createdAt                           DateTime            @default(now())
  updatedAt                           DateTime            @updatedAt
  favorites                           Favorite[]
  inquiries                           Inquiry[]
  listing_favorites                   listing_favorites[]
  listings                            listings[]
  messages_messages_receiverIdTousers messages[]          @relation("messages_receiverIdTousers")
  messages_messages_senderIdTousers   messages[]          @relation("messages_senderIdTousers")
  properties                          Property[]
  reports                             reports[]
  reviews_reviews_authorIdTousers     reviews[]           @relation("reviews_authorIdTousers")
  reviews_reviews_targetIdTousers     reviews[]           @relation("reviews_targetIdTousers")
  activities                          UserActivity[]
  sessions                            UserSession[]
  notifications                       Notification[]

  @@map("users")
}

model Admin {
  id           String    @id @default(cuid())
  username     String    @unique
  email        String    @unique
  firstName    String
  lastName     String
  password     String
  role         AdminRole @default(MODERATOR)
  permissions  Json?
  active       Boolean   @default(true)
  lastLogin    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  refreshToken String?   @db.Text
  tokenVersion Int       @default(0)

  @@map("admins")
}

model Property {
  id              String          @id @default(cuid())
  title           String
  description     String          @db.Text
  price           Decimal         @db.Decimal(12, 2)
  currency        Currency        @default(EGP)
  area            Int
  bedrooms        Int?
  bathrooms       Int?
  parking         Boolean         @default(false)
  furnished       Boolean         @default(false)
  city            String
  district        String
  address         String          @db.Text
  latitude        Float?
  longitude       Float?
  propertyType    PropertyType
  purpose         PropertyPurpose
  status          PropertyStatus  @default(PENDING)
  features        String?         @db.Text
  views           Int             @default(0)
  contactName     String
  contactPhone    String
  contactEmail    String
  userId          String
  reviewStatus    ReviewStatus    @default(PENDING)
  reviewedBy      String?
  reviewedAt      DateTime?
  rejectionReason String?         @db.Text
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  favorites       Favorite[]
  inquiries       Inquiry[]
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  images          PropertyImage[]

  @@index([city, district])
  @@index([propertyType, purpose])
  @@index([price, currency])
  @@index([userId], map: "properties_userId_fkey")
  @@map("properties")
}

model PropertyImage {
  id         String   @id @default(cuid())
  url        String
  alt        String?
  isMain     Boolean  @default(false)
  order      Int      @default(0)
  propertyId String
  createdAt  DateTime @default(now())
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([propertyId], map: "property_images_propertyId_fkey")
  @@map("property_images")
}

model Project {
  id              String         @id @default(cuid())
  title           String
  description     String         @db.Text
  location        String
  developer       String
  projectType     ProjectType
  status          ProjectStatus  @default(PLANNING)
  price           Decimal?       @db.Decimal(12, 2)
  bedrooms        Int?
  area            Int?
  type            String?
  totalUnits      Int?
  availableUnits  Int?
  minPrice        Decimal?       @db.Decimal(12, 2)
  maxPrice        Decimal?       @db.Decimal(12, 2)
  currency        Currency       @default(EGP)
  deliveryDate    DateTime?
  features        String?        @db.Text
  specifications  String?        @db.Text
  paymentPlan     String?        @db.Text
  locationDetails String?        @db.Text
  mainImage       String?
  contactName     String
  contactPhone    String
  contactEmail    String
  featured        Boolean        @default(false)
  published       Boolean        @default(true)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  images          ProjectImage[]

  @@map("projects")
}

model ProjectImage {
  id        String   @id @default(cuid())
  url       String
  alt       String?
  isMain    Boolean  @default(false)
  order     Int      @default(0)
  projectId String
  createdAt DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId], map: "project_images_projectId_fkey")
  @@map("project_images")
}

model PortfolioItem {
  id                String            @id @default(cuid())
  slug              String            @unique
  title             String
  description       String            @db.Text
  fullDescription   String?           @db.Text
  category          PortfolioCategory
  status            PortfolioStatus   @default(COMPLETED)
  location          String
  client            String
  duration          String
  area              String
  budget            String
  completionDate    String
  mainImage         String
  mainImagePublicId String?
  likes             Int               @default(0)
  views             Int               @default(0)
  rating            Float             @default(0)
  features          Json?
  tags              Json?
  challenges        Json?
  solutions         Json?
  technologies      Json?
  teamMembers       Json?
  clientTestimonial Json?
  featured          Boolean           @default(false)
  published         Boolean           @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  images            PortfolioImage[]

  @@map("portfolio_items")
}

model PortfolioImage {
  id          String        @id @default(cuid())
  url         String
  publicId    String?
  alt         String?
  order       Int           @default(0)
  portfolioId String
  createdAt   DateTime      @default(now())
  portfolio   PortfolioItem @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  @@index([portfolioId], map: "portfolio_images_portfolioId_fkey")
  @@map("portfolio_images")
}

model Favorite {
  id         String   @id @default(cuid())
  userId     String
  propertyId String
  createdAt  DateTime @default(now())
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, propertyId])
  @@index([propertyId], map: "favorites_propertyId_fkey")
  @@map("favorites")
}

model Inquiry {
  id          String        @id @default(cuid())
  name        String
  email       String
  phone       String?
  subject     String
  message     String        @db.Text
  inquiryType InquiryType   @default(PROPERTY)
  status      InquiryStatus @default(PENDING)
  userId      String?
  propertyId  String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  property    Property?     @relation(fields: [propertyId], references: [id])
  user        User?         @relation(fields: [userId], references: [id])

  @@index([propertyId], map: "inquiries_propertyId_fkey")
  @@index([userId], map: "inquiries_userId_fkey")
  @@map("inquiries")
}

model listing_categories {
  id          String     @id
  name        String     @unique
  nameAr      String     @unique
  description String?    @db.Text
  icon        String?
  color       String?
  order       Int        @default(0)
  active      Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime
  listings    listings[]
}

model listing_favorites {
  id        String   @id
  userId    String
  listingId String
  createdAt DateTime @default(now())
  listings  listings @relation(fields: [listingId], references: [id], onDelete: Cascade)
  users     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, listingId])
  @@index([listingId], map: "listing_favorites_listingId_fkey")
}

model listing_images {
  id        String   @id
  url       String
  publicId  String?
  alt       String?
  isMain    Boolean  @default(false)
  order     Int      @default(0)
  listingId String
  createdAt DateTime @default(now())
  listings  listings @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@index([listingId], map: "listing_images_listingId_fkey")
}

model listing_stats {
  id             String   @id
  listingId      String   @unique
  totalViews     Int      @default(0)
  uniqueViews    Int      @default(0)
  todayViews     Int      @default(0)
  weekViews      Int      @default(0)
  monthViews     Int      @default(0)
  totalInquiries Int      @default(0)
  totalFavorites Int      @default(0)
  phoneClicks    Int      @default(0)
  whatsappClicks Int      @default(0)
  emailClicks    Int      @default(0)
  sourceData     Json?
  updatedAt      DateTime
}

model listing_videos {
  id        String   @id
  url       String
  publicId  String?
  title     String?
  duration  Int?
  thumbnail String?
  listingId String
  createdAt DateTime @default(now())
  listings  listings @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@index([listingId], map: "listing_videos_listingId_fkey")
}

model listings {
  id                 String                @id
  title              String
  description        String                @db.Text
  price              Decimal               @db.Decimal(12, 2)
  currency           listings_currency     @default(EGP)
  priceType          listings_priceType    @default(FIXED)
  propertyType       listings_propertyType
  purpose            listings_purpose
  area               Int
  bedrooms           Int?
  bathrooms          Int?
  floors             Int?
  floor              Int?
  age                Int?
  furnished          Boolean               @default(false)
  parking            Boolean               @default(false)
  elevator           Boolean               @default(false)
  balcony            Boolean               @default(false)
  garden             Boolean               @default(false)
  swimmingPool       Boolean               @default(false)
  security           Boolean               @default(false)
  airConditioning    Boolean               @default(false)
  governorate        String
  city               String
  district           String
  address            String                @db.Text
  latitude           Float?
  longitude          Float?
  nearbyPlaces       Json?
  virtualTour        String?
  contactName        String
  contactPhone       String
  contactEmail       String?
  whatsappNumber     String?
  showContactInfo    Boolean               @default(false)
  status             listings_status       @default(PENDING)
  featured           Boolean               @default(false)
  urgent             Boolean               @default(false)
  views              Int                   @default(0)
  favoritesCount     Int                   @default(0)
  inquiries          Int                   @default(0)
  adminNotes         String?               @db.Text
  rejectionReason    String?               @db.Text
  approvedAt         DateTime?
  approvedBy         String?
  expiresAt          DateTime?
  publishedAt        DateTime?
  createdAt          DateTime              @default(now())
  updatedAt          DateTime
  userId             String
  categoryId         String
  listing_favorites  listing_favorites[]
  listing_images     listing_images[]
  listing_videos     listing_videos[]
  listing_categories listing_categories    @relation(fields: [categoryId], references: [id])
  users              User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages           messages[]
  reports            reports[]

  @@index([categoryId], map: "listings_categoryId_fkey")
  @@index([createdAt, status])
  @@index([governorate, city, district])
  @@index([price, currency])
  @@index([propertyType, purpose, status])
  @@index([userId, status])
}

model messages {
  id                               String               @id
  subject                          String?
  content                          String               @db.Text
  messageType                      messages_messageType @default(INQUIRY)
  status                           messages_status      @default(UNREAD)
  attachments                      Json?
  senderId                         String
  receiverId                       String
  listingId                        String?
  parentId                         String?
  readAt                           DateTime?
  createdAt                        DateTime             @default(now())
  updatedAt                        DateTime
  listings                         listings?            @relation(fields: [listingId], references: [id], onDelete: Cascade)
  messages                         messages?            @relation("messagesTomessages", fields: [parentId], references: [id])
  other_messages                   messages[]           @relation("messagesTomessages")
  users_messages_receiverIdTousers User                 @relation("messages_receiverIdTousers", fields: [receiverId], references: [id], onDelete: Cascade)
  users_messages_senderIdTousers   User                 @relation("messages_senderIdTousers", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([listingId, createdAt])
  @@index([parentId], map: "messages_parentId_fkey")
  @@index([receiverId, status, createdAt])
  @@index([senderId, createdAt])
}

model reports {
  id          String         @id
  reason      reports_reason
  description String?        @db.Text
  status      reports_status @default(PENDING)
  evidence    Json?
  adminNotes  String?        @db.Text
  reporterId  String
  listingId   String?
  handledBy   String?
  handledAt   DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime
  listings    listings?      @relation(fields: [listingId], references: [id], onDelete: Cascade)
  users       User           @relation(fields: [reporterId], references: [id], onDelete: Cascade)

  @@index([listingId, status])
  @@index([reporterId], map: "reports_reporterId_fkey")
  @@index([status, createdAt])
}

model reviews {
  id                            String             @id
  rating                        Int
  comment                       String?            @db.Text
  reviewType                    reviews_reviewType @default(USER)
  communication                 Float?
  reliability                   Float?
  professionalism               Float?
  authorId                      String
  targetId                      String
  createdAt                     DateTime           @default(now())
  updatedAt                     DateTime
  users_reviews_authorIdTousers User               @relation("reviews_authorIdTousers", fields: [authorId], references: [id], onDelete: Cascade)
  users_reviews_targetIdTousers User               @relation("reviews_targetIdTousers", fields: [targetId], references: [id], onDelete: Cascade)

  @@unique([authorId, targetId])
  @@index([targetId], map: "reviews_targetId_fkey")
}

model UserActivity {
  id        String   @id @default(cuid())
  userId    String
  action    String
  details   String?
  ipAddress String?
  userAgent String?
  location  String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "user_activities_userId_fkey")
  @@map("user_activities")
}

model UserSession {
  id           String    @id @default(cuid())
  userId       String
  sessionToken String    @unique @default(cuid())
  deviceName   String?
  deviceType   String?
  browser      String?
  os           String?
  ipAddress    String?
  location     String?
  country      String?
  city         String?
  isActive     Boolean   @default(true)
  lastActivity DateTime  @default(now())
  createdAt    DateTime  @default(now())
  expiresAt    DateTime?
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "user_sessions_userId_fkey")
  @@map("user_sessions")
}

enum UserType {
  INDIVIDUAL
  AGENT
  COMPANY
  ADMIN

  @@map("user_type")
}

enum MembershipLevel {
  BASIC
  PREMIUM
  VIP
  ENTERPRISE

  @@map("membership_level")
}

enum ExperienceLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT

  @@map("experience_level")
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  MODERATOR
  SUPPORT

  @@map("admin_role")
}

enum PropertyType {
  APARTMENT
  VILLA
  OFFICE
  COMMERCIAL
  LAND

  @@map("property_type")
}

enum PropertyPurpose {
  SALE
  RENT

  @@map("property_purpose")
}

enum PropertyStatus {
  ACTIVE
  SOLD
  RENTED
  PENDING
  INACTIVE

  @@map("property_status")
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
  NEEDS_EDIT

  @@map("review_status")
}

enum ProjectType {
  RESIDENTIAL
  COMMERCIAL
  MIXED

  @@map("project_type")
}

enum ProjectStatus {
  PLANNING
  UNDER_CONSTRUCTION
  COMPLETED
  DELIVERED

  @@map("project_status")
}

enum Currency {
  EGP
  USD

  @@map("currency")
}

enum InquiryType {
  PROPERTY
  PROJECT
  SERVICE
  GENERAL

  @@map("inquiry_type")
}

enum InquiryStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED

  @@map("inquiry_status")
}

enum PortfolioCategory {
  CONSTRUCTION
  FINISHING
  FURNITURE
  KITCHENS

  @@map("portfolio_category")
}

enum PortfolioStatus {
  COMPLETED
  IN_PROGRESS
  UPCOMING

  @@map("portfolio_status")
}

enum reports_reason {
  SPAM
  FAKE
  INAPPROPRIATE
  DUPLICATE
  FRAUD
  WRONG_CATEGORY
  CONTACT_ISSUE
  OTHER
}

enum messages_messageType {
  INQUIRY
  OFFER
  COMPLAINT
  SUPPORT
  GENERAL
}

enum reports_status {
  PENDING
  INVESTIGATING
  RESOLVED
  DISMISSED
}

enum reviews_reviewType {
  USER
  AGENT
  TRANSACTION
}

enum listings_currency {
  EGP
  USD
}

enum messages_status {
  UNREAD
  READ
  REPLIED
  ARCHIVED
}

enum listings_priceType {
  FIXED
  NEGOTIABLE
  AUCTION
}

enum listings_propertyType {
  APARTMENT
  VILLA
  OFFICE
  COMMERCIAL
  LAND
}

enum listings_purpose {
  SALE
  RENT
}

enum listings_status {
  DRAFT
  PENDING
  APPROVED
  REJECTED
  EXPIRED
  SOLD
  RENTED
  SUSPENDED
}

// نموذج الإشعارات
model Notification {
  id          String            @id @default(cuid())
  userId      String
  type        NotificationType
  title       String
  message     String
  read        Boolean           @default(false)
  createdAt   DateTime          @default(now())
  
  // علاقات
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}

// أنواع الإشعارات
enum NotificationType {
  PROPERTY_INQUIRY      // استفسار على عقار
  PROPERTY_FAVORITE     // إضافة عقار للمفضلة
  PROPERTY_VIEW         // مشاهدة عقار
  ACCOUNT_UPDATE        // تحديث بيانات الحساب
  EMAIL_VERIFIED        // تم توثيق البريد الإلكتروني
  TWO_FACTOR_ENABLED    // تم تفعيل المصادقة الثنائية
  PASSWORD_CHANGED      // تم تغيير كلمة المرور
  MEMBERSHIP_UPGRADED   // ترقية العضوية
  SYSTEM_NOTIFICATION   // إشعار نظام عام
  WELCOME               // ترحيب بالمستخدم الجديد
}
