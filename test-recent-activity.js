// ======================================================
// ๐งช AMG Real Estate - Test Recent Activity Display
// ======================================================
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testRecentActivity() {
  try {
    console.log('๐งช ุงุฎุชุจุงุฑ ุนุฑุถ ุงููุดุงุท ุงูุฃุฎูุฑ...');
    console.log('============================');

    // ุงูุจุญุซ ุนู ุฃูู ูุณุชุฎุฏู
    const user = await prisma.user.findFirst({
      select: {
        id: true,
        firstName: true,
        lastName: true,
        email: true
      }
    });

    if (!user) {
      console.log('โ ูุง ููุฌุฏ ูุณุชุฎุฏููู ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช');
      return;
    }

    console.log(`๐ค ุงููุณุชุฎุฏู: ${user.firstName} ${user.lastName} (${user.email})`);

    // ุฅุถุงูุฉ ุจุนุถ ุงูุฃูุดุทุฉ ุงูุชุฌุฑูุจูุฉ
    const activities = [
      {
        userId: user.id,
        action: 'LOGIN',
        details: 'ุชู ุชุณุฌูู ุงูุฏุฎูู ุจูุฌุงุญ',
        ipAddress: '192.168.1.1'
      },
      {
        userId: user.id,
        action: 'PROFILE_UPDATE',
        details: 'ุชู ุชุญุฏูุซ ูุนูููุงุช ุงูููู ุงูุดุฎุตู',
        ipAddress: '192.168.1.1'
      },
      {
        userId: user.id,
        action: 'EMAIL_VERIFICATION',
        details: 'ุชู ุฅุฑุณุงู ุฑุงุจุท ุชูุซูู ุงูุจุฑูุฏ ุงูุฅููุชุฑููู',
        ipAddress: '192.168.1.1'
      },
      {
        userId: user.id,
        action: 'PROPERTY_VIEW',
        details: 'ุนุฑุถ ุนูุงุฑ ูู ููุทูุฉ ุงููุงูุฑุฉ ุงูุฌุฏูุฏุฉ',
        ipAddress: '192.168.1.1'
      },
      {
        userId: user.id,
        action: '2FA_ENABLED',
        details: 'ุชู ุชูุนูู ุงููุตุงุฏูุฉ ุงูุซูุงุฆูุฉ ุจูุฌุงุญ',
        ipAddress: '192.168.1.1'
      }
    ];

    console.log('\n๐ ุฅุถุงูุฉ ุฃูุดุทุฉ ุชุฌุฑูุจูุฉ...');
    for (const activity of activities) {
      await prisma.userActivity.create({
        data: activity
      });
      console.log(`โ ุชู ุฅุถุงูุฉ: ${activity.action} - ${activity.details}`);
    }

    console.log('\n๐ ูุงุฆูุฉ ุงูุฃูุดุทุฉ ุงูุฃุฎูุฑุฉ:');
    const recentActivities = await prisma.userActivity.findMany({
      where: { userId: user.id },
      orderBy: { createdAt: 'desc' },
      take: 5,
      select: {
        id: true,
        action: true,
        details: true,
        createdAt: true
      }
    });

    recentActivities.forEach((activity, index) => {
      console.log(`${index + 1}. ${activity.action}: ${activity.details || 'ูุง ุชูุฌุฏ ุชูุงุตูู'}`);
      console.log(`   ุงูุชุงุฑูุฎ: ${activity.createdAt.toLocaleString('ar-EG')}`);
    });

    console.log('\n๐ฏ ูุง ุณูุธูุฑ ูู ุงูููู ุงูุดุฎุตู:');
    console.log('============================');
    
    const formattedActivities = recentActivities.map((activity) => ({
      id: activity.id,
      type: activity.action,
      title: activity.details || activity.action,
      action: activity.action,
      details: activity.details,
      createdAt: activity.createdAt.toISOString()
    }));

    formattedActivities.forEach((activity, index) => {
      console.log(`${index + 1}. ุงูุนููุงู: "${activity.title}"`);
      console.log(`   ุงูููุน: ${activity.type}`);
      console.log(`   ุงูููุช: ${new Date(activity.createdAt).toLocaleString('ar-EG')}`);
      console.log('   ---');
    });

    console.log('\nโ ุงูุขู ุณุชุธูุฑ ุงูุฃูุดุทุฉ ุจุงูุชูุงุตูู ูู ุงูููู ุงูุดุฎุตู!');
    console.log('๐ ุงููุดููุฉ ูุญูููุฉ: ุงููุดุงุท ุงูุฃุฎูุฑ ุณูุนุฑุถ ุงููุต ูุงูููุช ูุนุงู');

  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุงูุงุฎุชุจุงุฑ:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testRecentActivity();